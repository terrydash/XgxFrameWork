// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Dos.Tools.T4
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Data;
    using Dos.Tools.Common;
    using Dos.Tools.Model;
    using Dos.ORM;
    using Dos.Common;
    using Dos.T4;
    using Dos.Tools.DbDAL;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class MakeT4EntityFactory : MakeT4EntityFactoryBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 3 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
 
var asciiCode= 60;
System.Text.ASCIIEncoding asciiEncoding = new System.Text.ASCIIEncoding();
byte[] byteArray = new byte[] { (byte)asciiCode };

string left =asciiEncoding.GetString(byteArray);//<
asciiCode= 62;
byteArray = new byte[] { (byte)asciiCode };
string right=asciiEncoding.GetString(byteArray);//>

            
            #line default
            #line hidden
            
            #line 13 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ template language=\"C#\" #");
            
            #line 13 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 14 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ assembly name=\"System.Core\" #");
            
            #line 14 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 15 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ assembly name=\"System.Data\" #");
            
            #line 15 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 16 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ assembly name=\"System.Collections\" #");
            
            #line 16 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 17 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ assembly name=\"$(ProjectDir)bin\\Debug\\Dos.Common.dll\" #");
            
            #line 17 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 18 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ assembly name=\"$(ProjectDir)bin\\Debug\\Dos.Orm.dll\" #");
            
            #line 18 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 19 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ assembly name=\"$(ProjectDir)bin\\Debug\\");
            
            #line 19 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.NameSpace));
            
            #line default
            #line hidden
            this.Write(".dll\" #");
            
            #line 19 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 20 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"System.Linq\" #");
            
            #line 20 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 21 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"System.Text\" #");
            
            #line 21 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 22 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"System.Collections.Generic\" #");
            
            #line 22 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 23 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"System.Data\" #");
            
            #line 23 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 24 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"Dos.ORM\" #");
            
            #line 24 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 25 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"Dos.Common\" #");
            
            #line 25 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 26 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#@ import namespace=\"");
            
            #line 26 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.NameSpace));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 26 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 27 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#\r\n#region 生成接口拥有的方法\n                var type = typeof(IDal<");
            
            #line 28 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.ClassName));
            
            #line default
            #line hidden
            this.Write(@">);
                var gettype = type.GetMethods();

                StringBuilder Methods = new StringBuilder();
                string returnType = string.Empty;
                string classType = string.Empty;
                StringBuilder stringBuilder = new StringBuilder();
                StringBuilder stringBuilder2 = new StringBuilder();
                foreach (var VARIABLE in gettype)
                {
                    returnType = VARIABLE.ReturnType.ToString()

                                    .Replace(typeof(List<>).Namespace + ""."", string.Empty)
                                    .Replace(typeof(int).Namespace + ""."", string.Empty)
                                    .Replace(typeof(");
            
            #line 42 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.ClassName));
            
            #line default
            #line hidden
            this.Write(@").Namespace + ""."", string.Empty)
                                    .Replace(""`1"", """")
                                    .Replace(""["", ""<"")
                                    .Replace(""]"", "">"");




                    if (VARIABLE.IsPublic)
                    {
                        classType = ""public "";
                    }
                    if (VARIABLE.IsPrivate)
                    {
                        classType = ""private "";
                    }
                    if (VARIABLE.IsStatic)
                    {
                        classType += "" static"";
                    }
                    var Parameters = VARIABLE.GetParameters();
                    foreach (var VARIABLEP in Parameters)
                    {
                        stringBuilder.Append("","");
                        stringBuilder.Append(
                            VARIABLEP.ToString()
                               .Replace(typeof(List<>).Namespace + ""."", string.Empty)
                                .Replace(typeof(int).Namespace + ""."", string.Empty)
                                .Replace(typeof(");
            
            #line 65 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.ClassName));
            
            #line default
            #line hidden
            this.Write(@").Namespace + ""."", string.Empty)
                                .Replace(""`1"", """")
                                .Replace(""["", ""<"")
                                .Replace(""]"", "">""));




                    }
                    if (Parameters.Length > 0)
                    {
                        stringBuilder.Remove(0, 1);

                    }
                    else
                    {
                        stringBuilder.Clear();
                    }



                    stringBuilder2.Append(""					"").Append(classType).Append(returnType).Append("" "").Append(VARIABLE.Name).Append(""("").Append(stringBuilder).Append("")"");
                    stringBuilder.Clear();
                    stringBuilder2.AppendLine();
					stringBuilder2.AppendLine(""					{"");
                    stringBuilder2.AppendLine(""					throw new NotImplementedException();"");
                    stringBuilder2.AppendLine(""					}"");
                    Methods.Append(stringBuilder2);


                    stringBuilder2.Clear();

                }





                #endregion
#");
            
            #line 97 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Sys" +
                    "tem.Security.Cryptography.X509Certificates;\r\nusing System.Text;\r\nusing ");
            
            #line 103 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.NameSpace));
            
            #line default
            #line hidden
            this.Write(";\r\nnamespace ");
            
            #line 104 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.NameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpublic partial class ");
            
            #line 106 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.ClassName));
            
            #line default
            #line hidden
            this.Write("Factory:I");
            
            #line 106 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(VarDefine.ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\r\n\t\t{\r\n\t\t\t");
            
            #line 109 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(left));
            
            #line default
            #line hidden
            this.Write("#= Methods.ToString()#");
            
            #line 109 "G:\develop\workplace\dotnet\my\XgxFrameWork\Dos.Tools\T4\MakeT4EntityFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(right));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\t\t}\r\n\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class MakeT4EntityFactoryBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
