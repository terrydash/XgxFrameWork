// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 14.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XgxFrameWork.CodeCreaterLayer.T4_Template.T4
{
    using System.Windows.Forms;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Data;
    using System.Xml;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Administrator\Source\Repos\XgxFrameWork\XgxFrameWork.CodeCreaterLayer.T4_Template\T4\DataBaseHelper.ttinclude"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class DataBaseHelper : DataBaseHelperBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 17 "C:\Users\Administrator\Source\Repos\XgxFrameWork\XgxFrameWork.CodeCreaterLayer.T4_Template\T4\DataBaseHelper.ttinclude"
  
	
    public class Utils
    {
        /// <summary>
        /// 数据库连接配置文件
        /// </summary>
        public static readonly string DatabaseconfigPath = Application.StartupPath + "/Config/databaseconfig.xml";


        /// <summary>
        /// 获取连接
        /// </summary>
        /// <returns></returns>
        public static List<Connection> GetConnectionList()
        {
            List<Connection> list = new List<Connection>();
            XmlDocument doc = getXmlDocument();

            XmlNodeList xmlNodeList = doc.SelectNodes("servers/server");
            if (null != xmlNodeList && xmlNodeList.Count > 0)
            {
                foreach (XmlNode node in xmlNodeList)
                {
                    if (!node.HasChildNodes)
                        continue;

                    Connection connection = new Connection();

                    connection.ID = new Guid(node.Attributes["id"].Value);
                    connection.Name = node.Attributes["name"].Value;
                    connection.Database = node.Attributes["database"].Value;
                    connection.ConnectionString = node.FirstChild.InnerText;
                    connection.DbType = node.Attributes["dbtype"].Value;
                    list.Add(connection);

                }
            }
            return list;
        }


        static XmlDocument getXmlDocument()
        {
            XmlDocument doc = new XmlDocument();
            if (!File.Exists(DatabaseconfigPath))
            {
                File.WriteAllText(DatabaseconfigPath, @"<?xml version=""1.0"" encoding=""utf-8"" ?>
<servers>
</servers>
", Encoding.UTF8);
                //System.Threading.Thread.Sleep(2000);
            }


            doc.Load(DatabaseconfigPath);


            return doc;

        }

        /// <summary>
        /// 删除节点
        /// </summary>
        /// <param name="id"></param>
        public static void DeleteConnection(string id)
        {
            if (string.IsNullOrEmpty(id))
                return;

            XmlDocument doc = getXmlDocument();

            XmlNodeList xmlNodeList = doc.SelectNodes("servers/server");
            if (null != xmlNodeList && xmlNodeList.Count > 0)
            {
                foreach (XmlNode node in xmlNodeList)
                {
                    if (node.Attributes["id"].Value.Trim().ToLower().Equals(id.Trim().ToLower()))
                    {
                        node.ParentNode.RemoveChild(node);
                        break;
                    }
                }
            }

            doc.Save(DatabaseconfigPath);
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="conection"></param>
        public static void AddConnection(Connection conection)
        {
            XmlDocument doc = getXmlDocument();

            XmlNode root = doc.SelectSingleNode("servers");

            XmlElement xe = doc.CreateElement("server");

            xe.SetAttribute("id", conection.ID.ToString());
            xe.SetAttribute("name", conection.Name);
            xe.SetAttribute("database", conection.Database);
            xe.SetAttribute("dbtype", conection.DbType);

            XmlElement xe1 = doc.CreateElement("connectionstring");
            XmlCDataSection cdata = doc.CreateCDataSection(conection.ConnectionString);
            xe1.AppendChild(cdata);

            xe.AppendChild(xe1);

            root.AppendChild(xe);

            doc.Save(DatabaseconfigPath);
        }

        /// <summary>
        /// 获取一个连接配置
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static Connection GetConnectionModel(string id)
        {
            Connection connModel = null;
            if (string.IsNullOrEmpty(id))
                return connModel;

            XmlDocument doc = new XmlDocument();
            doc.Load(DatabaseconfigPath);

            XmlNode xmlNode = doc.SelectSingleNode("servers/server[@id='" + id.ToString() + "']");
            if (null != xmlNode)
            {
                connModel = new Connection();
                connModel.ID = new Guid(xmlNode.Attributes["id"].Value);
                connModel.Name = xmlNode.Attributes["name"].Value;
                connModel.Database = xmlNode.Attributes["database"].Value;
                connModel.ConnectionString = xmlNode.FirstChild.InnerText;
                connModel.DbType = xmlNode.Attributes["dbtype"].Value;
            }

            return connModel;
        }

        /// <summary>
        /// 系统配置路径
        /// </summary>
        public static string SysconfigPath = Application.StartupPath + "/Config/sysconfig.xml";


        /// <summary>
        /// 获取系统配置
        /// </summary>
        /// <returns></returns>
        public static Sysconfig GetSysconfigModel()
        {
            Sysconfig sysconfigModel = new Sysconfig();

            XmlDocument doc = new XmlDocument();
            doc.Load(SysconfigPath);
            XmlNode node = doc.SelectSingleNode("configs/config[@key='namespace']");
            if (null != node)
            {
                sysconfigModel.Namespace = node.FirstChild.InnerText;
            }
            node = doc.SelectSingleNode("configs/config[@key='batchdirectorypath']");
            if (null != node)
            {
                sysconfigModel.BatchDirectoryPath = node.FirstChild.InnerText;
            }

            return sysconfigModel;
        }


        /// <summary>
        /// 设置系统配置
        /// </summary>
        /// <returns></returns>
        public static void GetSysconfigModel(Sysconfig sysconfigModel)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(SysconfigPath);
            XmlNode node = doc.SelectSingleNode("configs/config[@key='namespace']");
            if (null != node)
            {
                node.FirstChild.Value = sysconfigModel.Namespace;
            }
            node = doc.SelectSingleNode("configs/config[@key='batchdirectorypath']");
            if (null != node)
            {
                node.FirstChild.Value = sysconfigModel.BatchDirectoryPath;
            }

            doc.Save(SysconfigPath);
        }

        /// <summary>
        /// 写命名空间
        /// </summary>
        /// <param name="names"></param>
        public static void WriteNamespace(string names)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(SysconfigPath);
            XmlNode node = doc.SelectSingleNode("configs/config[@key='namespace']");
            node.FirstChild.Value = names;

            //XmlCDataSection cdata = doc.CreateCDataSection(names);
            //node.AppendChild(cdata);

            doc.Save(SysconfigPath);
        }


        /// <summary>
        /// 写批量路径
        /// </summary>
        /// <param name="names"></param>
        public static void WriteBatchDirectoryPath(string path)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(SysconfigPath);
            XmlNode node = doc.SelectSingleNode("configs/config[@key='batchdirectorypath']");
            node.FirstChild.Value = path;

            //XmlCDataSection cdata = doc.CreateCDataSection(path);
            //node.AppendChild(cdata);

            doc.Save(SysconfigPath);
        }

        /// <summary>
        /// 读命名空间
        /// </summary>
        /// <returns></returns>
        public static string ReadNamespace()
        {
            return GetSysconfigModel().Namespace;
        }


        /// <summary>
        /// 读保存的批量导出路径
        /// </summary>
        /// <returns></returns>
        public static string ReadBatchDirectoryPath()
        {
            return GetSysconfigModel().BatchDirectoryPath;
        }


        /// <summary>
        /// 列信息装换
        /// </summary>
        /// <param name="dt"></param>
        /// <returns></returns>
        public static List<ColumnInfo> GetColumnInfos(DataTable dt)
        {
            List<ColumnInfo> list = new List<ColumnInfo>();
            if (dt == null)
            {
                return null;
            }
            foreach (DataRow row in dt.Rows)
            {
                string str = row["Colorder"].ToString();  //序号
                string str2 = row["ColumnName"].ToString();  //列名
                string str3 = row["TypeName"].ToString();  //类型
                string str4 = row["IsIdentity"].ToString();  //标识
                string str5 = row["IsPK"].ToString();  //主键
                string str6 = row["Length"].ToString();  //长度
                string str7 = row["Preci"].ToString();  //精度
                string str8 = row["Scale"].ToString();  //小数位
                string str9 = row["cisNull"].ToString(); //为空
                string str10 = row["DefaultVal"].ToString();  //默认值
                string str11 = row["DeText"].ToString();  //描述
                ColumnInfo item = new ColumnInfo();
                item.Colorder = str;
                item.ColumnName = str2;
                item.TypeName = str3;
                item.IsIdentity = str4 == "√";
                item.IsPK = str5 == "√";
                item.Length = str6;
                item.Preci = str7;
                item.Scale = str8;
                item.cisNull = (str9 == "√") || (string.Compare(str9, "Y", true) == 0);
                item.DefaultVal = str10;
                item.DeText = str11;
                item.ColumnNameRealName = item.ColumnName;
                list.Add(item);
            }
            return list;
        }

        public static DataTable GetColumnInfoDataTable(List<ColumnInfo> collist)
        {
            DataTable table = new DataTable();
            table.Columns.Add("colorder");
            table.Columns.Add("ColumnName");
            table.Columns.Add("TypeName");
            table.Columns.Add("Length");
            table.Columns.Add("Preci");
            table.Columns.Add("Scale");
            table.Columns.Add("IsIdentity");
            table.Columns.Add("isPK");
            table.Columns.Add("cisNull");
            table.Columns.Add("defaultVal");
            table.Columns.Add("deText");
            foreach (ColumnInfo info in collist)
            {
                DataRow row = table.NewRow();
                row["colorder"] = info.Colorder;
                row["ColumnName"] = info.ColumnName;
                row["TypeName"] = info.TypeName;
                row["Length"] = info.Length;
                row["Preci"] = info.Preci;
                row["Scale"] = info.Scale;
                row["IsIdentity"] = info.IsIdentity ? "√" : "";
                row["isPK"] = info.IsPK ? "√" : "";
                row["cisNull"] = info.cisNull ? "√" : "";
                row["defaultVal"] = info.DefaultVal;
                row["deText"] = info.DeText;
                table.Rows.Add(row);
            }
            return table;
        }

        private static System.Text.RegularExpressions.Regex regSpace = new System.Text.RegularExpressions.Regex(@"\s");

        /// <summary>
        /// 去掉空格
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string ReplaceSpace(string value)
        {
            if (string.IsNullOrEmpty(value))
                return string.Empty;
            char firstChar = value[0];
            if (firstChar >= 48 && firstChar <= 57)
            {
                //value = "F" + value;
                value = "_" + value;
            }
            return regSpace.Replace(value.Trim(), " ");
        }

        /// <summary>
        /// 首字母大写
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string ToUpperFirstword(string value)
        {
            if (string.IsNullOrEmpty(value))
                return string.Empty;

            return value.Substring(0, 1).ToUpper() + value.Substring(1);

        }


    }


        
        #line default
        #line hidden
        
        #line 7 "C:\Users\Administrator\Source\Repos\XgxFrameWork\XgxFrameWork.CodeCreaterLayer.T4_Template\T4\DataBaseModel.ttinclude"


    

    public class ColumnInfo
    {
        private bool _cisNull;
        private string _colorder;
        private string _columnName;
        private string _defaultVal;
        private string _deText;
        private bool _isIdentity;
        private bool _ispk;
        private string _length;
        private string _preci;
        private string _scale;
        private string _typeName;

        public bool cisNull
        {
            get
            {
                return this._cisNull;
            }
            set
            {
                this._cisNull = value;
            }
        }

        public string Colorder
        {
            get
            {
                return this._colorder;
            }
            set
            {
                this._colorder = value;
            }
        }

        public string ColumnName
        {
            get
            {
                return this._columnName;
            }
            set
            {
                this._columnName = value;
            }
        }

        private string _columnNameRealName;

        public string ColumnNameRealName
        {
            get
            {
                return this._columnNameRealName;
            }
            set
            {
                this._columnNameRealName = value;
            }
        }


        public string DefaultVal
        {
            get
            {
                return this._defaultVal;
            }
            set
            {
                this._defaultVal = value;
            }
        }

        public string DeText
        {
            get
            {
                return this._deText;
            }
            set
            {
                this._deText = value;
            }
        }

        public bool IsIdentity
        {
            get
            {
                return this._isIdentity;
            }
            set
            {
                this._isIdentity = value;
            }
        }

        public bool IsPK
        {
            get
            {
                return this._ispk;
            }
            set
            {
                this._ispk = value;
            }
        }

        public string Length
        {
            get
            {
                return this._length;
            }
            set
            {
                this._length = value;
            }
        }

        public string Preci
        {
            get
            {
                return this._preci;
            }
            set
            {
                this._preci = value;
            }
        }

        public string Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }

        public string TypeName
        {
            get
            {
                return this._typeName;
            }
            set
            {
                this._typeName = value;
            }
        }
    }
	public class Connection
    {
        private Guid id;
        public Guid ID { get { return id; } set { id = value; } }

        private string name;
        public string Name { get { return name; } set { name = value; } }

        private string database;
        public string Database { get { return database; } set { database = value; } }

        private string dbType;
        public string DbType { get { return dbType; } set { dbType = value; } }

        private string connectionString;
        public string ConnectionString { get { return connectionString; } set { connectionString = value; } }
    }
	 public class Sysconfig
    {
        private string _namespace = "Dos.Model";


        /// <summary>
        /// 记住的命名空间
        /// </summary>
        public string Namespace
        {
            get
            {
                return _namespace;
            }
            set
            {
                _namespace = value;
            }
        }


        private string batchDirectoryPath;


        /// <summary>
        /// 记住的批量生成的路径
        /// </summary>
        public string BatchDirectoryPath
        {
            get
            {
                return batchDirectoryPath;
            }
            set
            {
                batchDirectoryPath = value;
            }
        }
    }

	


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class DataBaseHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
